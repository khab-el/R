abt_part1 <- as.data.frame(read.csv("abt_part1.csv", header=TRUE, sep="\t"))
abt_part1 <- as.data.frame(read.csv("abt_part1.csv"))
abt_part2 <- as.data.frame(read.csv("abt_part2.csv"))
abt_part3 <- as.data.frame(read.csv("abt_part3.csv"))
library(DBI)
library(RSQLite)
sc <- dbConnect(RSQLite::SQLite(), ":memory:")
dbWriteTable(sc, "abt_part1", abt_part1)
dbWriteTable(sc, "abt_part2", abt_part2)
dbWriteTable(sc, "abt_part3", abt_part3)
abt_new <- dbGetQuery(sc, "SELECT * FROM abt_part1 as t1
LEFT JOIN abt_part2 as t2
ON t1.X = t2.X
LEFT JOIN abt_part3 as t3
ON t2.X = t3.X")
abt <- as.data.frame(read.csv("abt_default3.csv", header=TRUE, sep="\t"))
abt_part1 <- abt[, 1:78]
abt_part2 <- abt[, 79:155]
abt_part3 <- abt[, 156:232]
write.csv(abt_part1, "abt_part1.csv")
write.csv(abt_part2, "abt_part2.csv")
write.csv(abt_part3, "abt_part3.csv")
abt_part1 <- as.data.frame(read.csv("abt_part1.csv"))
abt_part2 <- as.data.frame(read.csv("abt_part2.csv"))
abt_part3 <- as.data.frame(read.csv("abt_part3.csv"))
library(DBI)
library(RSQLite)
sc <- dbConnect(RSQLite::SQLite(), ":memory:")
dbWriteTable(sc, "abt_part1", abt_part1)
dbWriteTable(sc, "abt_part2", abt_part2)
dbWriteTable(sc, "abt_part3", abt_part3)
abt <- dbGetQuery(sc, "SELECT * FROM abt_part1 as t1
LEFT JOIN abt_part2 as t2
ON t1.X = t2.X
LEFT JOIN abt_part3 as t3
ON t2.X = t3.X")
#head(abt)
View(abt)
abt <- abt[, -c(1,79,156)]
View(abt)
library(DBI)
library(RSQLite)
sc <- dbConnect(RSQLite::SQLite(), ":memory:")
dbWriteTable(sc, "abt_part1", abt_part1)
dbWriteTable(sc, "abt_part2", abt_part2)
dbWriteTable(sc, "abt_part3", abt_part3)
abt <- dbGetQuery(sc, "SELECT * FROM abt_part1 as t1
LEFT JOIN abt_part2 as t2
ON t1.X = t2.X
LEFT JOIN abt_part3 as t3
ON t2.X = t3.X")
View(abt)
abt <- abt[, -c(1,80,158)]
#install.packages("scorecard")
library(ggplot2)
library(corrplot)
library(MASS)
library(caTools)
library(data.table)
library(Matrix)
library(xgboost)
library(party)
library(ggthemes)
library(ggmosaic)
library(InformationValue)
library(Information)
library(ClustOfVar)
library(MLmetrics)
#library(sparklyr)
library(dplyr)
library(ROCR)
library(scorecard)
library(ggpubr)
# abt <- as.data.frame(read.csv("abt_default3.csv", header=TRUE, sep="\t"))
#
# abt_part1 <- abt[, 1:78]
# abt_part2 <- abt[, 79:155]
# abt_part3 <- abt[, 156:232]
#
# write.csv(abt_part1, "abt_part1.csv")
# write.csv(abt_part2, "abt_part2.csv")
# write.csv(abt_part3, "abt_part3.csv")
abt_part1 <- as.data.frame(read.csv("abt_part1.csv"))
abt_part2 <- as.data.frame(read.csv("abt_part2.csv"))
abt_part3 <- as.data.frame(read.csv("abt_part3.csv"))
library(DBI)
library(RSQLite)
sc <- dbConnect(RSQLite::SQLite(), ":memory:")
dbWriteTable(sc, "abt_part1", abt_part1)
dbWriteTable(sc, "abt_part2", abt_part2)
dbWriteTable(sc, "abt_part3", abt_part3)
abt <- dbGetQuery(sc, "SELECT * FROM abt_part1 as t1
LEFT JOIN abt_part2 as t2
ON t1.X = t2.X
LEFT JOIN abt_part3 as t3
ON t2.X = t3.X")
abt <- abt[, -c(1,80,158)]
#head(abt)
abt <- abt %>% mutate(REPORT_DT = as.Date(REPORT_DT))
# abt %>% dplyr::group_by(REPORT_DT) %>%
#                 dplyr::summarise(cnt = n())
# as.data.frame(unique(abt$default_flg))
abt$default_flg[abt$default_flg == -1]<-0
# as.data.frame(unique(abt$default_flg))
abt_meta <- as.data.frame(colnames(abt))
colnames(abt_meta) <- "Variable"
abt_meta$Variable <- as.character(abt_meta$Variable)
abt_meta$Description <- paste("Переменная ", abt_meta$Variable)
abt_meta$Role <- NA
abt$REPORT_DT <- as.Date(abt$REPORT_DT)
abt_meta$Type <- sapply(abt, class)
abt_meta$Role[abt_meta$Variable=="default_flg"] <- "Target"
abt_meta$Role[abt_meta$Variable=="REPORT_DT"] <- "Drop"
#head(abt)
abt_meta$Type <- ifelse(abt_meta$Type == "integer" | abt_meta$Type == "numeric","interval",abt_meta$Type)
abt_meta$Type <- ifelse(abt_meta$Type == "factor","character",abt_meta$Type)
logicals = abt_meta %>% filter(Type == "logical") %>% dplyr::select(Variable)
for(i in logicals$Variable){
abt[[i]] <- as.integer(abt[[i]])
}
abt_meta$Type <- ifelse(abt_meta$Type == "logical","interval",abt_meta$Type)
#abt_meta %>% group_by(Type) %>% summarise(cnt=n())
abt_meta$na <- sapply(X = abt, FUN = function(x){sum(is.na(x))/nrow(abt)})
abt_meta$Role <- ifelse((abt_meta$na>0.2)==TRUE,"Drop",abt_meta$Role)
abt_meta$Role <- ifelse(is.na(abt_meta$Role),"Input",abt_meta$Role)
impute_med <- function(x){ifelse(is.na(x), median(x, na.rm = TRUE), x)}
impute_zero <- function(x){ifelse(is.na(x), 0, x)}
numerics = abt_meta %>% filter(Type == "interval" & Role == "Input") %>% dplyr::select(Variable)
for(i in numerics$Variable){
abt[[i]][is.na(abt[[i]])] <- 0
}
factors = abt_meta %>% filter(Type == "character" & Role == "Input") %>% dplyr::select(Variable)
for(i in factors$Variable){
#abt[[i]][is.na(abt[[i]])] <- "UNKNOWN"
abt[[i]] <- as.character(abt[[i]])
}
for(i in factors$Variable){
abt[[i]][(abt[[i]])==""] <- "UNKNOWN"
}
inputs = (abt_meta %>% filter(Role == "Input"))$Variable
# head(abt[,as.character(inputs)])
factors = as.character((abt_meta %>% filter(Type == "character" & Role == "Input")) $Variable)
factors = abt_meta %>% filter(Type == "character") %>% dplyr::select(Variable)
for(i in factors$Variable){
abt[[i]] <- as.factor(abt[[i]])
}
abt_meta$NLevels = sapply(abt,nlevels)
abt_meta$Role <- ifelse((abt_meta$NLevels>50)==TRUE,"Drop",abt_meta$Role)
factors = as.character((abt_meta %>% filter(Type == "character" & Role == "Input")) $Variable)
numerics = as.character((abt_meta %>% filter(Type == "interval" & Role == "Input")) $Variable)
inputs = c(numerics,factors)
# inputs
# abt_meta %>% filter(Type %in% c("character", "interval") & Role == "Input")
View(abt_meta)
write.csv(abt_meta, "abt_meta.csv")
write.csv(abt, "abt.csv")
View(abt_meta)
#install.packages("scorecard")
library(ggplot2)
library(corrplot)
library(MASS)
library(caTools)
library(data.table)
library(Matrix)
library(xgboost)
library(party)
library(ggthemes)
library(ggmosaic)
library(InformationValue)
library(Information)
library(ClustOfVar)
library(MLmetrics)
#library(sparklyr)
library(dplyr)
library(ROCR)
library(scorecard)
library(ggpubr)
abt <- as.data.frame(read.csv("abt.csv"))
abt_meta <- as.data.frame(read.csv("abt_meta.csv"))
abt_train <- abt %>% filter(REPORT_DT <= "2017-01-31")
abt_test <- abt %>% filter(REPORT_DT > "2017-01-31")
tree <- ctree(default_flg ~ ., data = abt_train)
#install.packages("scorecard")
library(ggplot2)
library(corrplot)
library(MASS)
library(caTools)
library(data.table)
library(Matrix)
library(xgboost)
library(party)
library(ggthemes)
library(ggmosaic)
library(InformationValue)
library(Information)
library(ClustOfVar)
library(MLmetrics)
#library(sparklyr)
library(dplyr)
library(ROCR)
library(scorecard)
library(ggpubr)
abt <- as.data.frame(read.csv("abt.csv"))
abt_meta <- as.data.frame(read.csv("abt_meta.csv"))
abt_train <- abt %>% filter(REPORT_DT <= "2017-01-31")
abt_test <- abt %>% filter(REPORT_DT > "2017-01-31")
View(abt)
abt <- as.data.frame(read.csv("abt.csv"))
abt_meta <- as.data.frame(read.csv("abt_meta.csv"))
abt <- abt %>% mutate(REPORT_DT = as.Date(REPORT_DT))
abt_train <- abt %>% filter(REPORT_DT <= "2017-01-31")
abt_test <- abt %>% filter(REPORT_DT > "2017-01-31")
tree <- ctree(default_flg ~ ., data = abt_train)
abt <- as.data.frame(read.csv("abt.csv"))[,-1]
abt_meta <- as.data.frame(read.csv("abt_meta.csv"))[,-1]
abt <- abt %>% mutate(REPORT_DT = as.Date(REPORT_DT))
abt_train <- abt %>% filter(REPORT_DT <= "2017-01-31")
abt_test <- abt %>% filter(REPORT_DT > "2017-01-31")
tree <- ctree(default_flg ~ ., data = abt_train)
abt_train <- as.data.frame(read.csv("abt_train.csv"))[,-1]
abt_train <- abt %>% filter(REPORT_DT <= "2017-01-31")
abt_test <- abt %>% filter(REPORT_DT > "2017-01-31")
abt_train <- as.data.frame(read.csv("abt_train.csv"))[,-1]
abt_test <- as.data.frame(read.csv("abt_test.csv"))[,-1]
tree <- ctree(default_flg ~ ., data = abt_train)
plot(tree)
tree_predict_train <- predict(tree, type = 'response')
tree_predict_test <- predict(tree, newdata=abt_test, type = 'response')
tree_pred_test <- prediction(tree_predict_test, abt_test$default_flg)
perf_eva(abt_test$default_flg, tree_predict_test, title = "Test", groupnum = 20,
type = c("ks","roc"), show_plot = TRUE, seed = 186)$pic
perf_eva(abt_test$default_flg, tree_predict_test, title = "Test", groupnum = 20,
type = c("ks","roc"), show_plot = TRUE, seed = 186)$pic
tree_perf_test_lift <- performance(tree_pred_test,"lift","rpp")
plot(tree_perf_test_lift, main="lift curve", colorize=F)
tree_validation = as.data.frame(c("Train", "Test"))
colnames(tree_validation) <- "Data"
tree_validation$Gini = c(Gini(tree_predict_train, abt_train$default_flg),
Gini(tree_predict_test, abt_test$default_flg))
tree_validation$KS = c(KS_Stat(tree_predict_train, abt_train$default_flg),
KS_Stat(tree_predict_test, abt_test$default_flg))
tree_validation$LiftAUC = c(LiftAUC(tree_predict_train, abt_train$default_flg),
LiftAUC(tree_predict_test, abt_test$default_flg))
tree_validation
View(abt_train)
tree_predict_test <- predict(tree, newdata=abt, type = 'response')
tree_pred_test <- prediction(tree_predict_test, abt_test$default_flg)
tree <- ctree(default_flg ~ ., data = abt_train)
plot(tree)
abt_train <- abt %>% filter(REPORT_DT <= "2017-01-31")
abt_test <- abt %>% filter(REPORT_DT > "2017-01-31")
tree_predict_train <- predict(tree, newdata=abt_train, type = 'response')
tree_predict_test <- predict(tree, newdata=abt_test, type = 'response')
tree_pred_test <- prediction(tree_predict_test, abt_test$default_flg)
tree_perf_test_lift <- performance(tree_pred_test,"lift","rpp")
plot(tree_perf_test_lift, main="lift curve", colorize=F)
tree_validation = as.data.frame(c("Train", "Test"))
colnames(tree_validation) <- "Data"
tree_validation$Gini = c(Gini(tree_predict_train, abt_train$default_flg),
Gini(tree_predict_test, abt_test$default_flg))
tree_validation$KS = c(KS_Stat(tree_predict_train, abt_train$default_flg),
KS_Stat(tree_predict_test, abt_test$default_flg))
tree_validation$LiftAUC = c(LiftAUC(tree_predict_train, abt_train$default_flg),
LiftAUC(tree_predict_test, abt_test$default_flg))
tree_validation
tree_validation
View(tree_validation)
tree_validation
